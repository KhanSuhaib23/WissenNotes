// Cursor Syntax


declare
	v_empno employees.employee_id%type;
	v_fname employees.first_name%type;
	v_lname employees.last_name%type;
	cursor emp_cursor is
	select employee_id, first_name, last_name
	from employees;
begin
	open emp_cursor;
	loop
		fetch emp_cursor into v_empno, v_fname, v_lname;
		exit when emp_cursor%rowcount > 10 or emp_cursor%notfound;
		dbms_output.put_line((v_empno) || '    ' || v_fname || ' ' || v_lname);
	end loop;
	close emp_cursor;
end;



// Exception Handling

declare 
	exp exception;
	v_name varchar2(23);
begin
	select last_name into v_name 
	from employees
	where department_id = 90;
exception
	when too_many_rows then
		dbms_output.put_line('No Data');
end;
/


cannot store multiple rows inside a scalar variable
therefore too many rows

declare
	exp exception;
	pragma exception_init(exp, -02292); // Oracle Error 02292 is violtion of integrity constraints error
	v_name varchar2(23);
begin
	delete from employees
	where department_id = 90;
exception 
	when exp then 
		dbms_output.put_line('Some Problem');
end;
/

// Procedures

create or replace procedure raise_salary
   (p_eid in employees.employee_id%type,
    inc in number)
is
begin
   update employees
   set salary = salary + inc
   where employee_id = p_eid;
end raise_salary;
/

// executing procedure from different user


grant execute on <proc-name> to <user-name>


on the other user use

execute <og-user>.<proc-name>([params]);

create or replace procedure query_emp
	(p_id in employees.employee_id%type,
	 p_name out employees.last_name%type,
	 p_sal out employees.salary%type)
is 
begin 
	select last_name, salary
	into p_name, p_sal
	from employees
	where employee_id = p_id;
end query_emp;
/

If procedure created with compilation message 

use

show errors; 

to get all the errors in compilation

use

show errors;

create or replace procedure format_phonenum
( p_phonenum in out varchar2 )
is
begin
p_phonenum := '(' || substr(p_phonenum, 1, 3) || ') ' || substr(p_phonenum, 4, 3) || '-' || substr(p_phonenum, 7);
end format_phonenum;



----------packages----------------

----declaraction----

create or replace package comm_package 
is
	q_comm number := 0.10;
	procedure reset_comm 
		( p_comm in number);
end comm_package;
/

----definition----

create or replace package body comm_package 
is
	q_comm number := 0.10;

	function validate_comm 
		(p_comm in number)
		return boolean
	is
		v_max_comm number;
	begin 
		select max(commission_pct)
		into v_max_comm 
		from employees;
		
		if p_comm > v_max_comm then return(true);
		else return (false);
		endif;
	end validate_comm;

	procedure reset_comm 
		( p_comm in number)
	is
	begin
		if validate_comm(p_comm) then q_comm := p_comm;
		else raise_application_error(-20210, 'Invalid commission');
		end if;
	end reset_comm;

end comm_package;
/



//-------- Triggers ----------//

	instead of used only for complex views


create table audit_emp (
	user_name varchar2(30),
	time_stamp date,
	id number(6),
	old_last_name varchar2(25),
	new_last_name varchar2(25),
	old_title varchar2(10),
	new_title varchar2(10),
	old_salary number(8,2),
	new_salary number(8, 2)
);

create or replace trigger audit_emp_values
after delete or insert or update on employees
for each row
begin 
	insert into audit_emp(user_name, time_stamp, id, old_last_name, new_last_name, old_title, new_title, old_salary, new_salary)
	values (user, sysdate, :old.employee_id, :old.last_name, :new.last_name, :old.job_id, :new.job_id, :old.salary, :new.salary);
end;


create table log_trig_table (
	user_id varchar2(25),
	log_date date,
	action varchar2(30)
);


create or replace trigger logon_trig 
after logon on schema
begin
	insert into log_trig_table values(user, sysdate, 'Logging on');
end;

create or replace trigger logoff_trig 
before logoff on schema
begin
	insert into log_trig_table values(user, sysdate, 'Logging off');
end;


---------- Materialized View (since 9) ------------

create table services (
	service_id varchar2(5),
	service_desc varchar2(50),
	cost number,
	last_updated date,
	first_created date,
	total_users number,
	constraint service_pk primary key (service_id)
	);

